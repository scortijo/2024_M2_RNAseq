knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# toutes les libraries dont nous avons besoin pour cette partie du cours
library(visdat)
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
View(RNAseq_data)
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
RNAseq_data
vis_dat(RNAseq_data)
# toutes les libraries dont nous avons besoin pour cette partie du cours
library(visdat)
library(scTenifoldNet)
# toutes les libraries dont nous avons besoin pour cette partie du cours
library(tidyverse)
library(visdat)
library(scTenifoldNet)
cpmNormalization(RNAseq_data)
RNAseq_data
# Cette fonction a besoin d'un tableau uniquement numérique. Nous modifions donc le tableau pour
# que la colonne des gènes devienne le nom des lignes avec la fonction suivante:
column_to_rownames <- column_to_rownames(RNAseq_data, var="Geneid")
cpmNormalization(RNAseq_data)
# Cette fonction a besoin d'un tableau uniquement numérique. Nous modifions donc le tableau pour
# que la colonne des gènes devienne le nom des lignes avec la fonction suivante:
RNAseq_data <- column_to_rownames(RNAseq_data, var="Geneid")
cpmNormalization(RNAseq_data)
# Normalisation avec la fonction `cpmNormalization` pour avoir le nombre de reads de chaque gène par million de reads de la librarie:
CPMnorm_RNAseq_data <- cpmNormalization(RNAseq_data)
View(CPMnorm_RNAseq_data)
# Cette fonction a besoin d'un tableau uniquement numérique. Nous modifions donc le tableau pour
# que la colonne des gènes devienne le nom des lignes avec la fonction suivante:
RNAseq_data <- column_to_rownames(RNAseq_data, var="Geneid")
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
RNAseq_data
# Cette fonction a besoin d'un tableau uniquement numérique. Nous modifions donc le tableau pour
# que la colonne des gènes devienne le nom des lignes avec la fonction suivante:
RNAseq_data <- column_to_rownames(RNAseq_data, var="Geneid")
# Normalisation avec la fonction `cpmNormalization` pour avoir le nombre de reads de chaque gène par million de reads de la librarie:
CPMnorm_RNAseq_data <- cpmNormalization(RNAseq_data)
# Comme le format de sortie de la fonction n'est pas un data.frame (qui est le format nécessaire pour la suite),
# nous devons changer le format avec la fontion suivante:
CPMnorm_RNAseq_data <- as.data.frame.matrix(CPMnorm_RNAseq_data)
CPMnorm_RNAseq_data <- as.data.frame.matrix(CPMnorm_RNAseq_data)
head(CPMnorm_RNAseq_data)
dim(CPMnorm_RNAseq_data)
rowMeans(CPMnorm_RNAseq_data[,1:12]) %>%
ggplot() +
geom_point()
rowMeans(CPMnorm_RNAseq_data[,1:12]
)
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]))
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,10))
?hist
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,10), breaks=20)
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,10), breaks=200)
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,10), breaks=2000)
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,10), breaks=20000)
hist(rowMeans(CPMnorm_RNAseq_data[,1:12]), xlim=c(0,30), breaks=10000)
CPMnorm_RNAseq_data_expressed <-  filter(CPMnorm_RNAseq_data, rowMeans(CPMnorm_RNAseq_data[,1:12])>=2 &
rowSums(CPMnorm_RNAseq_data[1:12]<0.0001)<5)
CPMnorm_RNAseq_data_expressed <-  filter(CPMnorm_RNAseq_data, rowMeans(CPMnorm_RNAseq_data[,1:12])>=2 &
rowSums(CPMnorm_RNAseq_data[1:12]==0)<5)
rowSums(CPMnorm_RNAseq_data[1:12]==0)
hist(rowSums(CPMnorm_RNAseq_data[1:12]==0), xlim=c(0,30), breaks=10000)
hist(rowSums(CPMnorm_RNAseq_data[1:12]==0), breaks=100)
hist(rowSums(CPMnorm_RNAseq_data[1:12]==0), breaks=10)
hist(rowSums(CPMnorm_RNAseq_data[1:12]==0), breaks=12)
hist(rowSums(CPMnorm_RNAseq_data[1:12]==0), breaks=13)
CPMnorm_RNAseq_data_expressed <-  filter(CPMnorm_RNAseq_data, rowMeans(CPMnorm_RNAseq_data[,1:12])>=2)
CPMnorm_RNAseq_data_expressed <-  filter(CPMnorm_RNAseq_data, rowMeans(CPMnorm_RNAseq_data[,1:12])>=2 &
rowSums(CPMnorm_RNAseq_data[1:12]==0)<5)
CPMnorm_RNAseq_data_expressed <-  filter( CPMnorm_RNAseq_data,rowSums(CPMnorm_RNAseq_data[1:12]==0)<5)
pca_res_CPMnorm_RNAseq_data_expressed <- prcomp(t(CPMnorm_RNAseq_data_expressed),scale. = TRUE, center = TRUE)
summary(pca_res_CPMnorm_RNAseq_data_expressed)
fviz_eig(pca_res_CPMnorm_RNAseq_data_expressed)
# toutes les libraries dont nous avons besoin pour cette partie du cours
library(tidyverse)
library(visdat)
library(scTenifoldNet)
library(factoextra)
summary(pca_res_CPMnorm_RNAseq_data_expressed)
fviz_eig(pca_res_CPMnorm_RNAseq_data_expressed)
fviz_eig(pca_res_CPMnorm_RNAseq_data_expressed)
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3)
# chargement d'un tableau expliquant à quel génotype et quelle condition environnementale correspond chaque échantillon
data_info <- read_tsv("../../../Data_info.txt")
data_info
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, habillage=data_info$genotype,
invisible="quali")
data_info
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, habillage=c(data_info$genotype,data_info$KNO3),
invisible="quali")
?fviz_pca_ind
# chargement d'un tableau expliquant à quel génotype et quelle condition environnementale correspond chaque échantillon
data_info <- read_tsv("../../../Data_info.txt")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype,invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, geom.ind= data_info$KNO3, invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, alpha.ind= data_info$KNO3, invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, fill.ind= data_info$KNO3, invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, alpha.ind=data_info$KNO3, invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, geom.ind=data_info$KNO3, invisible="quali")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype, repel=TRUE)
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype,  repel=TRUE, invisible="quali")
# chargement d'un tableau expliquant à quel génotype et quelle condition environnementale correspond chaque échantillon
data_info <- read_tsv("../../../Data_info.txt")
# chargement d'un tableau expliquant à quel génotype et quelle condition environnementale correspond chaque échantillon
data_info <- read_tsv("../../../Data_info.txt")
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed, pointsize=3, col.ind=data_info$genotype_KNO3,  repel=TRUE, invisible="quali")
rownames_to_column(CPMnorm_RNAseq_data_expressed)
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520")
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
t()
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520")
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = sample, values_to = expression)
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression")
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"))
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_")
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point()
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT1G08090") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point()
# ARP6
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point()
# NRT2.1
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT1G08090") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point()
# ARP6
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point() +
ggtitle(italic("ARP6"))
# ARP6
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point() +
ggtitle(expression(italic("ARP6")))
# ARP6
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT3G33520") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point() +
ggtitle(expression(italic("ARP6")))
# NRT2.1
rownames_to_column(CPMnorm_RNAseq_data_expressed, var="gene") %>%
filter(gene=="AT1G08090") %>%
pivot_longer(arp6_0.5mM_rep1:WT_0.5mM_rep3, names_to = "sample", values_to = "expression") %>%
separate(sample, into=c("genotype", "KNO3", "replicate"), sep="_") %>%
ggplot(aes(x=genotype, y=expression, col=KNO3)) +
geom_point() +
ggtitle(expression(italic("NRT2.1")))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DESeq2)
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
library(tidyverse)
library(DESeq2)
RNAseq_data <- read_tsv("../../../Raw_featureCounts_WT_arp6.txt")
sampleCondition <- read_table("../../../Data_info_WT_arp6_0.5mM.txt")
View(sampleCondition)
sampleTable$condition <- factor(sampleTable$condition.genotype)
directory <- "../../../0.5mM_WT_vs_arp6/"
sampleFiles <- list.files(directory)
sampleCondition <- read_table("../../../Data_info_WT_arp6_0.5mM.txt")
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition.genotype)
View(sampleTable)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
ddsHTSeq
View(sampleCondition)
View(sampleTable)
directory <- "../../../0.5mM_WT_vs_arp6/"
sampleFiles <- list.files(directory)
sampleCondition <- read_table("../../../Data_info_WT_arp6_0.5mM.txt")
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition.genotype)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
ddsHTSeq
View(sampleCondition)
View(sampleTable)
directory <- "../../../0.5mM_WT_vs_arp6/"
sampleFiles <- list.files(directory)
sampleCondition <- read_table("../../../Data_info_WT_arp6_0.5mM.txt")
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition.genotype)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
ddsHTSeq
View(ddsHTSeq)
keep <- rowSums(counts(ddsHTSeq)) >= 4
ddsHTSeq <- ddsHTSeq[keep,]
keep2 <- rowSums(counts(ddsHTSeq)<0.0001) < 3
ddsHTSeq <- ddsHTSeq[keep2,]
ddsHTSeq$condition <- relevel(ddsHTSeq$condition, ref = "WT")
View(ddsHTSeq)
dds <- DESeq(ddsHTSeq)
res <- results(dds)
res
resOrdered <- res[order(res$padj),]
resOrdered
sum(res$padj < 0.1, na.rm=TRUE)
DESeq_result <- as.data.frame(resOrdered) %>%
rownames_to_column(var="gene")
View(res)
View(DESeq_result)
plotMA(res, ylim=c(-2,2))
sum(res$padj < 0.1, na.rm=TRUE)
dds <- DESeq(ddsHTSeq)
res <- results(dds)
res
resOrdered <- res[order(res$padj),]
resOrdered
sum(res$padj < 0.1, na.rm=TRUE)
DESeq_result <- as.data.frame(resOrdered) %>%
rownames_to_column(var="gene")
?results
dds <- DESeq(ddsHTSeq)
res <- results(dds, alpha=0.05)
res
resOrdered <- res[order(res$padj),]
resOrdered
sum(res$padj < 0.05, na.rm=TRUE)
DESeq_result <- as.data.frame(resOrdered) %>%
rownames_to_column(var="gene")
plotMA(res, ylim=c(-2,2))
dds <- DESeq(ddsHTSeq)
res <- results(dds, alpha=0.05)
res
sum(res$padj < 0.05, na.rm=TRUE)
plotMA(res, ylim=c(-2,2))
resOrdered <- res[order(res$padj),]
resOrdered
DESeq_result <- as.data.frame(resOrdered) %>%
rownames_to_column(var="gene")
View(DESeq_result)
plotMA(res, ylim=c(-2,2))
write_tsv(DESeq_result, file="DEseq_0.5mM_WT_vs_arp6.txt")
# Définition du dossier contenant les données d'expression pour tous
# les échantillons de la comparaison analysée
directory_0.5mM <- "../../../0.5mM_WT_vs_arp6/"
sampleFiles_0.5mM <- list.files(directory_0.5mM)
# Chargement du fichier contenant les information sur les échantillons
sampleCondition_0.5mM <- read_table("../../../Data_info_WT_arp6_0.5mM.txt")
# Création d'un objet combinant le nom des fichier des échantillons et
# les informations sur ces échantillons
sampleTable_0.5mM <- data.frame(sampleName = sampleFiles_0.5mM,
fileName = sampleFiles_0.5mM,
condition = sampleCondition_0.5mM)
sampleTable_0.5mM$condition <- factor(sampleTable_0.5mM$condition.genotype)
# Vérifier que tout est bon à cette étape avec la commande:
View(sampleTable_0.5mM)
# Création de l'objet spécifique à DESeq:
ddsHTSeq_0.5mM <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_0.5mM,
directory = directory_0.5mM,
design= ~ condition)
ddsHTSeq_0.5mM
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
RNAseq_data <- read_tsv("../../../data/Raw_featureCounts_WT_arp6.txt")
RNAseq_data
# chargement d'un tableau expliquant à quel génotype et quelle
# condition environnementale correspond chaque échantillon
data_info <- read_tsv("../../../data/Data_info.txt")
# Maintenant refaisons l'ACP avec le code couleur en utilisant
# les paramères suivants:
# col.ind=data_info$genotype_KNO3 pour ajouter le code couleur
# repel=TRUE pour faire un sorte que le texte soit lisible
# invisible="quali" pour enlever la moyenne de chaque groupe
fviz_pca_ind(pca_res_CPMnorm_RNAseq_data_expressed,
pointsize=3, col.ind=data_info$genotype_KNO3,
repel=TRUE, invisible="quali")
